{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/screenshots.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/screenshots.ts"],"names":[],"mappings":"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","sourcesContent":["import {task} from 'gulp';\nimport {readdirSync, statSync, existsSync, mkdirp, readFileSync, writeFileSync} from 'fs-extra';\nimport * as path from 'path';\nimport * as admin from 'firebase-admin';\nimport * as firebase from 'firebase';\nimport {\n  openScreenshotsBucket,\n  openFirebaseScreenshotsDatabase,\n  connectFirebaseScreenshots} from '../util/firebase';\nimport {setGithubStatus} from '../util/github';\n\nconst imageDiff = require('image-diff');\n\n// Directory to which untrusted screenshot results are temporarily written\n//   (without authentication required) before they are verified and copied to\n//   the final storage location.\nconst TEMP_FOLDER = 'untrustedInbox';\nconst SCREENSHOT_DIR = './screenshots';\nconst FIREBASE_REPORT = `${TEMP_FOLDER}/screenshot/reports`;\nconst FIREBASE_IMAGE = `${TEMP_FOLDER}/screenshot/images`;\nconst FIREBASE_FILELIST = 'screenshot/filenames';\n\n/** Task which upload screenshots generated from e2e test. */\ntask('screenshots', () => {\n  let prNumber = process.env['TRAVIS_PULL_REQUEST'];\n  if (prNumber) {\n    let firebaseApp = connectFirebaseScreenshots();\n    let database = firebaseApp.database();\n\n    return getScreenshotFiles(database)\n      .then(() => downloadAllGoldsAndCompare(database, prNumber))\n      .then((results: boolean) => updateResult(database, prNumber, results))\n      .then((result: boolean) => updateGithubStatus(prNumber, result))\n      .then(() => uploadScreenshotsData(database, 'diff', prNumber))\n      .then(() => uploadScreenshotsData(database, 'test', prNumber))\n      .then(() => updateTravis(database, prNumber))\n      .then(() => setScreenFilenames(database, prNumber))\n      .then(() => database.goOffline(), () => database.goOffline());\n  } else if (process.env['TRAVIS']) {\n    // Only update golds and filenames for build\n    let database = openFirebaseScreenshotsDatabase();\n    uploadScreenshots()\n      .then(() => setScreenFilenames(database))\n      .then(() => database.goOffline(), () => database.goOffline());\n  }\n});\n\nfunction updateFileResult(database: firebase.database.Database, prNumber: string,\n                          filenameKey: string, result: boolean) {\n  return getPullRequestRef(database, prNumber).child('results').child(filenameKey).set(result);\n}\n\nfunction updateResult(database: firebase.database.Database, prNumber: string, result: boolean) {\n  return getPullRequestRef(database, prNumber).child('result').set(result).then(() => result);\n}\n\nfunction getPullRequestRef(database: firebase.database.Database | admin.database.Database,\n                           prNumber: string) {\n  let secureToken = getSecureToken();\n  return database.ref(FIREBASE_REPORT).child(prNumber).child(secureToken);\n}\n\nfunction updateTravis(database: firebase.database.Database,\n                      prNumber: string) {\n  return getPullRequestRef(database, prNumber).update({\n    commit: process.env['TRAVIS_COMMIT'],\n    sha: process.env['TRAVIS_PULL_REQUEST_SHA'],\n    travis: process.env['TRAVIS_JOB_ID'],\n  });\n}\n\n/** Get a list of filenames from firebase database. */\nfunction getScreenshotFiles(database: firebase.database.Database) {\n  mkdirp(path.join(SCREENSHOT_DIR, `golds`));\n  mkdirp(path.join(SCREENSHOT_DIR, `diff`));\n\n  return database.ref('screenshot/goldens').once('value')\n      .then((snapshot: firebase.database.DataSnapshot) => {\n    let counter = 0;\n    snapshot.forEach((childSnapshot: firebase.database.DataSnapshot) => {\n      let key = childSnapshot.key;\n      let binaryData = new Buffer(childSnapshot.val(), 'base64').toString('binary');\n      writeFileSync(`${SCREENSHOT_DIR}/golds/${key}.screenshot.png`, binaryData, 'binary');\n      counter++;\n      if (counter == snapshot.numChildren()) {\n        return true;\n      }\n    });\n  }).catch((error: any) => console.log(error));\n}\n\nfunction extractScreenshotName(fileName: string) {\n  return path.basename(fileName, '.screenshot.png');\n}\n\nfunction getLocalScreenshotFiles(dir: string): string[] {\n  return readdirSync(dir)\n    .filter((fileName: string) => !statSync(path.join(SCREENSHOT_DIR, fileName)).isDirectory())\n    .filter((fileName: string) => fileName.endsWith('.screenshot.png'));\n}\n\n/**\n * Get processed secure token. The jwt token has 3 parts: header, payload, signature and has format\n * {jwtHeader}.{jwtPayload}.{jwtSignature}\n * The three parts is connected by '.', while '.' is not a valid path in firebase database.\n * Replace all '.' to '/' to make the path valid\n * Output is {jwtHeader}/{jwtPayload}/{jwtSignature}.\n * This secure token is used to validate the write access is from our TravisCI under our repo.\n * All data is written to /$path/$secureToken/$data and after validated the\n * secure token, the data is moved to /$path/$data in database.\n */\nfunction getSecureToken() {\n  return process.env['FIREBASE_ACCESS_TOKEN'].replace(/[.]/g, '/');\n}\n\n/**\n * Upload screenshots to google cloud storage.\n * @param prNumber - The key used in firebase. Here it is the PR number.\n * @param mode - Can be 'test' or 'diff' .\n *   If the images are the test results, mode should be 'test'.\n *   If the images are the diff images generated, mode should be 'diff'.\n */\nfunction uploadScreenshotsData(database: firebase.database.Database,\n                               mode: 'test' | 'diff', prNumber: string) {\n  let localDir = mode == 'diff' ? path.join(SCREENSHOT_DIR, 'diff') : SCREENSHOT_DIR;\n  let promises = getLocalScreenshotFiles(localDir).map((file: string) => {\n    let fileName = path.join(localDir, file);\n    let filenameKey = extractScreenshotName(fileName);\n    let secureToken = getSecureToken();\n    let data = readFileSync(fileName);\n    return database.ref(FIREBASE_IMAGE).child(prNumber)\n      .child(secureToken).child(mode).child(filenameKey).set(data);\n  });\n  return Promise.all(promises);\n}\n\n\n/** Download golds screenshots. */\nfunction downloadAllGoldsAndCompare(database: firebase.database.Database, prNumber: string) {\n\n  let filenames = getLocalScreenshotFiles(path.join(SCREENSHOT_DIR, `golds`));\n\n  return Promise.all(filenames.map((filename: string) => {\n    return diffScreenshot(filename, database, prNumber);\n  })).then((results: boolean[]) => results.every((value: boolean) => value == true));\n}\n\nfunction diffScreenshot(filename: string, database: firebase.database.Database,\n                        prNumber: string) {\n  // TODO(tinayuangao): Run the downloads and diffs in parallel.\n  filename = path.basename(filename);\n  let goldUrl = path.join(SCREENSHOT_DIR, `golds`, filename);\n  let pullRequestUrl = path.join(SCREENSHOT_DIR, filename);\n  let diffUrl = path.join(SCREENSHOT_DIR, `diff`, filename);\n  let filenameKey = extractScreenshotName(filename);\n\n  if (existsSync(goldUrl) && existsSync(pullRequestUrl)) {\n    return new Promise((resolve: any, reject: any) => {\n      imageDiff({\n        actualImage: pullRequestUrl,\n        expectedImage: goldUrl,\n        diffImage: diffUrl,\n      }, (err: any, imagesAreSame: boolean) => {\n        if (err) {\n          console.log(err);\n          imagesAreSame = false;\n          reject(err);\n        }\n        resolve(imagesAreSame);\n        return updateFileResult(database, prNumber, filenameKey, imagesAreSame);\n      });\n    });\n  } else {\n    return updateFileResult(database, prNumber, filenameKey, false).then(() => false);\n  }\n}\n\n/**\n * Upload a list of filenames to firebase database as gold.\n * This is necessary for control panel since google-cloud is not available to client side.\n */\nfunction setScreenFilenames(database: admin.database.Database | firebase.database.Database,\n                            prNumber?: string) {\n  let filenames: string[] = getLocalScreenshotFiles(SCREENSHOT_DIR);\n  let filelistDatabase = prNumber ?\n    getPullRequestRef(database, prNumber).child('filenames') :\n    database.ref(FIREBASE_FILELIST);\n  return filelistDatabase.set(filenames);\n}\n\n/** Updates the Github Status of the given Pullrequest. */\nfunction updateGithubStatus(prNumber: number, result: boolean) {\n  setGithubStatus(process.env['TRAVIS_PULL_REQUEST_SHA'], {\n    result: result,\n    name: 'Screenshot Tests',\n    description: `Screenshot Tests ${result ? 'passed' : 'failed'})`,\n    url: `http://material2-screenshots.firebaseapp.com/${prNumber}`\n  });\n}\n\n/** Upload screenshots to google cloud storage. */\nfunction uploadScreenshots() {\n  let bucket = openScreenshotsBucket();\n  let promises = getLocalScreenshotFiles(SCREENSHOT_DIR).map((file: string) => {\n    let fileName = path.join(SCREENSHOT_DIR, file);\n    let destination = `golds/${file}`;\n    return bucket.upload(fileName, { destination: destination });\n  });\n  return Promise.all(promises);\n}\n"]}