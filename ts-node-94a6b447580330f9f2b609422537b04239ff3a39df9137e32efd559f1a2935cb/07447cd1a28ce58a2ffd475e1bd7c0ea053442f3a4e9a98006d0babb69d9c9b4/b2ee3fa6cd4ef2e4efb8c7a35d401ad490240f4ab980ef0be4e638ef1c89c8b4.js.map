{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/e2e.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/e2e.ts"],"names":[],"mappings":";AAAA,6BAAiC;AACjC,2BAA6B;AAE7B,0CAAoE;AACpE,qDAE8B;AAE9B,6DAA6D;AAC7D,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE5C,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,uBAAW,EAAE,SAAS,CAAC,CAAC;AACjD,IAAM,MAAM,GAAG,uBAAW,CAAC;AAE3B,IAAM,sBAAsB,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAY,EAAE,yBAAyB,CAAC,CAAC;AAClF,IAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAExD,WAAI,CAAC,eAAe,EAAE;IACpB,YAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAC1D,YAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC;AAEH,+BAA+B;AAC/B,WAAI,CAAC,kBAAkB,EAAE,0BAAW,CAAC,YAAY,CAAC,CAAC,CAAC;AAEpD,yDAAyD;AACzD,WAAI,CAAC,sBAAsB,EAAE,uBAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAEvD,iCAAiC;AACjC,WAAI,CAAC,cAAc,EAAE,2BAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;AAE7C,+DAA+D;AAC/D,WAAI,CAAC,wBAAwB,EAAE,2BAAY,CAAC,YAAY,EAAE,mBAAmB,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAE5F,qEAAqE;AACrE,WAAI,CAAC,kBAAkB,EAAE,2BAAY,CAAC,YAAY,EAAE,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;AAE/E,oCAAoC;AACpC,WAAI,CAAC,eAAe,EAAE,yBAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;AAEjD,oCAAoC;AACpC,WAAI,CAAC,oBAAoB,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;AAEpD,qCAAqC;AACrC,WAAI,CAAC,cAAc,EAAE,2BAAY,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC;AAEpE;;;GAGG;AACH,WAAI,CAAC,oBAAoB,EAAE,CAAC,cAAc,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC;AAE/E;;GAEG;AACH,WAAI,CAAC,KAAK,EAAE,2BAAY,CACtB,CAAC,wBAAwB,EAAE,cAAc,CAAC,EAC1C,kBAAkB,EAClB,oBAAoB,EACpB,aAAa,CACd,CAAC,CAAC","sourcesContent":["import {task, watch} from 'gulp';\nimport * as path from 'path';\n\nimport {SOURCE_ROOT, DIST_E2EAPP, PROJECT_ROOT} from '../constants';\nimport {\n  tsBuildTask, copyTask, buildAppTask, execNodeTask, sequenceTask, serverTask\n} from '../util/task_helpers';\n\n// There are no type definitions available for these imports.\nconst gulpConnect = require('gulp-connect');\n\nconst appDir = path.join(SOURCE_ROOT, 'e2e-app');\nconst outDir = DIST_E2EAPP;\n\nconst PROTRACTOR_CONFIG_PATH = path.join(PROJECT_ROOT, 'test/protractor.conf.js');\nconst tsconfigPath = path.join(appDir, 'tsconfig.json');\n\ntask(':watch:e2eapp', () => {\n  watch(path.join(appDir, '**/*.ts'), [':build:e2eapp:ts']);\n  watch(path.join(appDir, '**/*.html'), [':build:e2eapp:assets']);\n});\n\n/** Builds e2e app ts to js. */\ntask(':build:e2eapp:ts', tsBuildTask(tsconfigPath));\n\n/** Copies e2e app assets (html, css) to build output. */\ntask(':build:e2eapp:assets', copyTask(appDir, outDir));\n\n/** Builds the entire e2e app. */\ntask('build:e2eapp', buildAppTask('e2eapp'));\n\n/** Ensures that protractor and webdriver are set up to run. */\ntask(':test:protractor:setup', execNodeTask('protractor', 'webdriver-manager', ['update']));\n\n/** Runs protractor tests (assumes that server is already running. */\ntask(':test:protractor', execNodeTask('protractor', [PROTRACTOR_CONFIG_PATH]));\n\n/** Starts up the e2e app server. */\ntask(':serve:e2eapp', serverTask(outDir, false));\n\n/** Terminates the e2e app server */\ntask(':serve:e2eapp:stop', gulpConnect.serverClose);\n\n/** Builds and serves the e2e app. */\ntask('serve:e2eapp', sequenceTask('build:e2eapp', ':serve:e2eapp'));\n\n/**\n * [Watch task] Builds and serves e2e app, rebuilding whenever the sources change.\n * This should only be used when running e2e tests locally.\n */\ntask('serve:e2eapp:watch', ['serve:e2eapp', 'library:watch', ':watch:e2eapp']);\n\n/**\n * Builds and serves the e2e-app and runs protractor once the e2e-app is ready.\n */\ntask('e2e', sequenceTask(\n  [':test:protractor:setup', 'serve:e2eapp'],\n  ':test:protractor',\n  ':serve:e2eapp:stop',\n  'screenshots',\n));\n\n"]}