{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/util/ts-compiler.ts","sources":["/mnt/c/basidia/material2/tools/gulp/util/ts-compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as chalk from 'chalk';\n\n/** Compiles a TypeScript project with possible extra options. */\nexport function compileProject(project: string, options: ts.CompilerOptions = {}) {\n  let parsed = parseProjectConfig(project, options);\n  let program = ts.createProgram(parsed.fileNames, parsed.options);\n  let baseDir = program.getCurrentDirectory();\n\n  // Report any invalid TypeScript options for the project.\n  reportDiagnostics(program.getOptionsDiagnostics(), baseDir);\n\n  let emitResult = program.emit();\n\n  reportDiagnostics(emitResult.diagnostics, baseDir);\n}\n\n/** Reads a input file and transpiles it into a new file. */\nexport function transpileFile(inputPath: string, outputPath: string, options: ts.CompilerOptions) {\n  let inputFile = fs.readFileSync(inputPath, 'utf-8');\n  let transpiled = ts.transpileModule(inputFile, { compilerOptions: options });\n\n  reportDiagnostics(transpiled.diagnostics);\n\n  fs.writeFileSync(outputPath, transpiled.outputText);\n}\n\n/** Parses a TypeScript project configuration. */\nfunction parseProjectConfig(project: string, options: ts.CompilerOptions) {\n  let config = ts.readConfigFile(project, ts.sys.readFile).config;\n  let basePath = path.dirname(project);\n\n  let host = {\n    useCaseSensitiveFileNames: true,\n    fileExists: ts.sys.fileExists,\n    readDirectory: ts.sys.readDirectory,\n    readFile: ts.sys.readFile\n  };\n\n  return ts.parseJsonConfigFileContent(config, host, basePath, options);\n}\n\n/** Formats the TypeScript diagnostics into a error string. */\nexport function formatDiagnostics(diagnostics: ts.Diagnostic[], baseDir: string): string {\n  return diagnostics.map(diagnostic => {\n    let res = `â€¢ ${chalk.red(`TS${diagnostic.code}`)} - `;\n\n    if (diagnostic.file) {\n      let {line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n      let filePath = path.relative(baseDir, diagnostic.file.fileName);\n\n      res += `${filePath}(${line + 1},${character + 1}): `;\n    }\n    res += `${ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')}`;\n\n    return res;\n  }).join('\\n');\n}\n\n/** Checks and reports diagnostics if present. */\nexport function reportDiagnostics(diagnostics: ts.Diagnostic[], baseDir?: string) {\n  if (diagnostics && diagnostics.length && diagnostics[0]) {\n    console.error(formatDiagnostics(diagnostics, baseDir));\n    throw new Error('TypeScript compilation failed.');\n  }\n}\n"]}