{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/release.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/release.ts"],"names":[],"mappings":"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","sourcesContent":["import {spawn} from 'child_process';\nimport {existsSync, statSync, writeFileSync, readFileSync} from 'fs-extra';\nimport {join, basename} from 'path';\nimport {task, src, dest} from 'gulp';\nimport {execNodeTask, execTask, sequenceTask} from '../util/task_helpers';\nimport {\n  DIST_RELEASE, DIST_BUNDLES, DIST_MATERIAL, COMPONENTS_DIR, LICENSE_BANNER, DIST_ROOT\n} from '../constants';\nimport * as minimist from 'minimist';\n\n// There are no type definitions available for these imports.\nconst glob = require('glob');\nconst gulpRename = require('gulp-rename');\n\n/** Parse command-line arguments for release task. */\nconst argv = minimist(process.argv.slice(3));\n\n// Matches all Typescript definition files for Material.\nconst typingsGlob = join(DIST_MATERIAL, '**/*.+(d.ts|metadata.json)');\n// Matches the \"package.json\" and \"README.md\" file that needs to be shipped.\nconst assetsGlob = join(COMPONENTS_DIR, '+(package.json|README.md)');\n// Matches all UMD bundles inside of the bundles distribution.\nconst umdGlob = join(DIST_BUNDLES, '*.umd.*');\n// Matches all flat ESM bundles (e.g material.js and material.es5.js)\nconst fesmGlob = [join(DIST_BUNDLES, '*.js'), `!${umdGlob}`];\n\n// The entry-point for the scss theming bundle.\nconst themingEntryPointPath = join(COMPONENTS_DIR, 'core', 'theming', '_all-theme.scss');\n\n// Output path for the scss theming bundle.\nconst themingBundlePath = join(DIST_RELEASE, '_theming.scss');\n\n// Matches all pre-built theme css files\nconst prebuiltThemeGlob = join(DIST_MATERIAL, '**/theming/prebuilt/*.css');\n\ntask('build:release', sequenceTask(\n  'library:build',\n  ':package:release',\n));\n\n/** Task that combines intermediate build artifacts into the release package structure. */\ntask(':package:release', sequenceTask(\n  [':package:typings', ':package:umd', ':package:fesm', ':package:assets', ':package:theming'],\n  ':inline-metadata-resources',\n  ':package:metadata',\n));\n\n/** Writes a re-export metadata */\ntask(':package:metadata', () => {\n  const metadataReExport =\n      `{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./typings/index\"}]}`;\n  writeFileSync(join(DIST_RELEASE, 'material.metadata.json'), metadataReExport, 'utf-8');\n});\n\n/** Inlines the html and css resources into all metadata.json files in dist/ */\ntask(':inline-metadata-resources', () => {\n  // Create a map of fileName -> fullFilePath. This is needed because the templateUrl and\n  // styleUrls for each component use just the filename because, in the source, the component\n  // and the resources live in the same directory.\n  const componentResources = new Map<string, string>();\n  glob(join(DIST_ROOT, '**/*.+(html|css)'), (err: any, resourceFilePaths: any) => {\n    for (const path of resourceFilePaths) {\n      componentResources.set(basename(path), path);\n    }\n  });\n\n  // Find all metadata files. For each one, parse the JSON content, inline the resources, and\n  // reserialize and rewrite back to the original location.\n  glob(join(DIST_ROOT, '**/*.metadata.json'), (err: any, metadataFilePaths: any) => {\n    for (const path of metadataFilePaths) {\n      let metadata = JSON.parse(readFileSync(path, 'utf-8'));\n      inlineMetadataResources(metadata, componentResources);\n      writeFileSync(path , JSON.stringify(metadata), 'utf-8');\n    }\n  });\n});\n\ntask(':package:assets', () => src(assetsGlob).pipe(dest(DIST_RELEASE)));\n\n/** Copy all d.ts except the special flat typings from ngc to typings/ in the release package. */\ntask(':package:typings', () => {\n  return src(typingsGlob)\n    .pipe(dest(join(DIST_RELEASE, 'typings')))\n    .on('end', () => createTypingFile());\n});\n\n/** Copy umd bundles to the root of the release package. */\ntask(':package:umd', () => src(umdGlob).pipe((dest(join(DIST_RELEASE, 'bundles')))));\n\n/** Copy primary entry-point FESM bundles to the @angular/ directory. */\ntask(':package:fesm', () => src(fesmGlob).pipe(dest(join(DIST_RELEASE, '@angular'))));\n\n/** Copies all prebuilt themes into the release package under `prebuilt-themes/` */\ntask(':package:theming', [':bundle:theming-scss'],\n    () => src(prebuiltThemeGlob)\n        .pipe(gulpRename({dirname: ''}))\n        .pipe(dest(join(DIST_RELEASE, 'prebuilt-themes'))));\n\n/** Bundles all scss requires for theming into a single scss file in the root of the package. */\ntask(':bundle:theming-scss', execNodeTask(\n    'scss-bundle',\n    'scss-bundle', [\n    '-e', themingEntryPointPath,\n    '-d', themingBundlePath,\n]));\n\n/** Make sure we're logged in. */\ntask(':publish:whoami', execTask('npm', ['whoami'], {\n  silent: true,\n  errMessage: 'You must be logged in to publish.'\n}));\n\n/** Create a typing file that links to the bundled definitions of NGC. */\nfunction createTypingFile() {\n  writeFileSync(join(DIST_RELEASE, 'material.d.ts'),\n    LICENSE_BANNER + '\\nexport * from \"./typings/index\";'\n  );\n}\n\ntask(':publish:logout', execTask('npm', ['logout']));\n\n\nfunction _execNpmPublish(label: string): Promise<{}> {\n  const packageDir = DIST_RELEASE;\n  if (!statSync(packageDir).isDirectory()) {\n    return;\n  }\n\n  if (!existsSync(join(packageDir, 'package.json'))) {\n    throw new Error(`\"${packageDir}\" does not have a package.json.`);\n  }\n\n  if (!existsSync(join(packageDir, 'LICENSE'))) {\n    throw new Error(`\"${packageDir}\" does not have a LICENSE file`);\n  }\n\n  process.chdir(packageDir);\n  console.log(`Publishing material...`);\n\n  const command = 'npm';\n  const args = ['publish', '--access', 'public', label ? `--tag` : undefined, label || undefined];\n  return new Promise((resolve, reject) => {\n    console.log(`  Executing \"${command} ${args.join(' ')}\"...`);\n    if (argv['dry']) {\n      resolve();\n      return;\n    }\n\n    const childProcess = spawn(command, args);\n    childProcess.stdout.on('data', (data: Buffer) => {\n      console.log(`  stdout: ${data.toString().split(/[\\n\\r]/g).join('\\n          ')}`);\n    });\n    childProcess.stderr.on('data', (data: Buffer) => {\n      console.error(`  stderr: ${data.toString().split(/[\\n\\r]/g).join('\\n          ')}`);\n    });\n\n    childProcess.on('close', (code: number) => {\n      if (code == 0) {\n        resolve();\n      } else {\n        reject(new Error(`Material did not publish, status: ${code}.`));\n      }\n    });\n  });\n}\n\ntask(':publish', function(done: (err?: any) => void) {\n  const label = argv['tag'];\n  const currentDir = process.cwd();\n\n  if (!label) {\n    console.log('You can use a label with --tag=labelName.');\n    console.log('Publishing using the latest tag.');\n  } else {\n    console.log(`Publishing using the ${label} tag.`);\n  }\n  console.log('\\n\\n');\n\n  // Publish only the material package.\n  return _execNpmPublish(label)\n    .then(() => done())\n    .catch((err: Error) => done(err))\n    .then(() => process.chdir(currentDir));\n});\n\ntask('publish', sequenceTask(\n  ':publish:whoami',\n  'build:release',\n  ':publish',\n  ':publish:logout',\n));\n\n\n/**\n * Recurse through a parsed metadata.json file and inline all html and css.\n * Note: this assumes that all html and css files have a unique name.\n */\nfunction inlineMetadataResources(metadata: any, componentResources: Map<string, string>) {\n  // Convert `templateUrl` to `template`\n  if (metadata.templateUrl) {\n    const fullResourcePath = componentResources.get(metadata.templateUrl);\n    metadata.template = readFileSync(fullResourcePath, 'utf-8');\n    delete metadata.templateUrl;\n  }\n\n  // Convert `styleUrls` to `styles`\n  if (metadata.styleUrls && metadata.styleUrls.length) {\n    metadata.styles = [];\n    for (const styleUrl of metadata.styleUrls) {\n      const fullResourcePath = componentResources.get(styleUrl);\n      metadata.styles.push(readFileSync(fullResourcePath, 'utf-8'));\n    }\n    delete metadata.styleUrls;\n  }\n\n  // We we did nothing at this node, go deeper.\n  if (!metadata.template && !metadata.styles) {\n    for (const property in metadata) {\n      if (typeof metadata[property] == 'object' && metadata[property]) {\n        inlineMetadataResources(metadata[property], componentResources);\n      }\n    }\n  }\n}\n"]}