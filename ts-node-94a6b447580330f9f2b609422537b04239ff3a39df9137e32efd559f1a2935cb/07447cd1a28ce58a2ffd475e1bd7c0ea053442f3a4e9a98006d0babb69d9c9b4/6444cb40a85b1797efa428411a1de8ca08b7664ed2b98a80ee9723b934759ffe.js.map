{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/util/firebase.ts","sources":["/mnt/c/basidia/material2/tools/gulp/util/firebase.ts"],"names":[],"mappings":";AAAA,IAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAChD,IAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,IAAM,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAEvC,IAAM,MAAM,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAEzD,4DAA4D;AAC5D;IACE,sEAAsE;IACtE,8FAA8F;IAC9F,aAAa,CAAC,aAAa,CAAC;QAC1B,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC;YACxC,UAAU,EAAE,qBAAqB;YACjC,YAAY,EAAE,qEAAqE;YACnF,sFAAsF;YACtF,sEAAsE;YACtE,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;SACnE,CAAC;QACF,WAAW,EAAE,4CAA4C;KAC1D,CAAC,CAAC;IAEH,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AAClC,CAAC;AAfD,sEAeC;AAED;;;GAGG;AACH;IACE,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC;QACvB,SAAS,EAAE,uBAAuB;QAClC,WAAW,EAAE;YACX,YAAY,EAAE,uEAAuE;YACrF,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;SACtE;KACF,CAAC,CAAC;IAEH,yCAAyC;IACzC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;AACzD,CAAC;AAXD,sDAWC;AAED,mEAAmE;AACnE;IACE,sEAAsE;IACtE,8FAA8F;IAC9F,IAAI,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC;QAC9C,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC;YACxC,UAAU,EAAE,uBAAuB;YACnC,YAAY,EAAE,uEAAuE;YACrF,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;SACtE,CAAC;QACF,WAAW,EAAE,8CAA8C;KAC5D,EAAE,uBAAuB,CAAC,CAAC;IAE5B,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AAClC,CAAC;AAbD,0EAaC;AAED,oEAAoE;AACpE,gBAAuB,GAAW;IAChC,sFAAsF;IACtF,sEAAsE;IACtE,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC3C,CAAC;AAJD,wBAIC;AAED;;;GAGG;AACH;IACE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACjD,CAAC;AAFD,gEAEC","sourcesContent":["const firebaseAdmin = require('firebase-admin');\nconst firebase = require('firebase');\nconst gcloud = require('google-cloud');\n\nconst config = require('../../../functions/config.json');\n\n/** Opens a connection to the firebase realtime database. */\nexport function openFirebaseDashboardDatabase() {\n  // Initialize the Firebase application with firebaseAdmin credentials.\n  // Credentials need to be for a Service Account, which can be created in the Firebase console.\n  firebaseAdmin.initializeApp({\n    credential: firebaseAdmin.credential.cert({\n      project_id: 'material2-dashboard',\n      client_email: 'firebase-adminsdk-ch1ob@material2-dashboard.iam.gserviceaccount.com',\n      // In Travis CI the private key will be incorrect because the line-breaks are escaped.\n      // The line-breaks need to persist in the service account private key.\n      private_key: decode(process.env['MATERIAL2_FIREBASE_PRIVATE_KEY'])\n    }),\n    databaseURL: 'https://material2-dashboard.firebaseio.com'\n  });\n\n  return firebaseAdmin.database();\n}\n\n/**\n * Open Google Cloud Storage for screenshots.\n * The files uploaded to google cloud are also available to firebase storage.\n */\nexport function openScreenshotsBucket() {\n  let gcs = gcloud.storage({\n    projectId: 'material2-screenshots',\n    credentials: {\n      client_email: 'firebase-adminsdk-t4209@material2-screenshots.iam.gserviceaccount.com',\n      private_key: decode(process.env['MATERIAL2_SCREENSHOT_FIREBASE_KEY'])\n    },\n  });\n\n  // Reference the existing appspot bucket.\n  return gcs.bucket('material2-screenshots.appspot.com');\n}\n\n/** Opens a connection to the firebase database for screenshots. */\nexport function openFirebaseScreenshotsDatabase() {\n  // Initialize the Firebase application with firebaseAdmin credentials.\n  // Credentials need to be for a Service Account, which can be created in the Firebase console.\n  let screenshotApp = firebaseAdmin.initializeApp({\n    credential: firebaseAdmin.credential.cert({\n      project_id: 'material2-screenshots',\n      client_email: 'firebase-adminsdk-t4209@material2-screenshots.iam.gserviceaccount.com',\n      private_key: decode(process.env['MATERIAL2_SCREENSHOT_FIREBASE_KEY'])\n    }),\n    databaseURL: 'https://material2-screenshots.firebaseio.com'\n  }, 'material2-screenshots');\n\n  return screenshotApp.database();\n}\n\n/** Decodes a Travis CI variable that is public in favor for PRs. */\nexport function decode(str: string): string {\n  // In Travis CI the private key will be incorrect because the line-breaks are escaped.\n  // The line-breaks need to persist in the service account private key.\n  return (str || '').replace(/\\\\n/g, '\\n');\n}\n\n/**\n * Open firebase connection for screenshot\n * This connection is client side connection with no credentials\n */\nexport function connectFirebaseScreenshots() {\n  return firebase.initializeApp(config.firebase);\n}\n\n"]}