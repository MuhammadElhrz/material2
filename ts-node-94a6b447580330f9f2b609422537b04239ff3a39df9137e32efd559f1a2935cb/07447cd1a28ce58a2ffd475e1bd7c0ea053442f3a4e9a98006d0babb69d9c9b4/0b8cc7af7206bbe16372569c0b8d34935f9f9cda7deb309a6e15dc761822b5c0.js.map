{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/util/task_helpers.ts","sources":["/mnt/c/basidia/material2/tools/gulp/util/task_helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as child_process from 'child_process';\nimport * as fs from 'fs';\nimport * as gulp from 'gulp';\nimport * as path from 'path';\nimport {NPM_VENDOR_FILES, PROJECT_ROOT, DIST_ROOT} from '../constants';\n\n/* Those imports lack typings. */\nconst gulpClean = require('gulp-clean');\nconst gulpMerge = require('merge2');\nconst gulpRunSequence = require('run-sequence');\nconst gulpSass = require('gulp-sass');\nconst gulpSourcemaps = require('gulp-sourcemaps');\nconst gulpConnect = require('gulp-connect');\nconst gulpIf = require('gulp-if');\nconst gulpCleanCss = require('gulp-clean-css');\n\n// There are no type definitions available for these imports.\nconst resolveBin = require('resolve-bin');\nconst httpRewrite = require('http-rewrite-middleware');\n\n/** If the string passed in is a glob, returns it, otherwise append '**\\/*' to it. */\nfunction _globify(maybeGlob: string, suffix = '**/*') {\n  if (maybeGlob.indexOf('*') != -1) {\n    return maybeGlob;\n  }\n  try {\n    const stat = fs.statSync(maybeGlob);\n    if (stat.isFile()) {\n      return maybeGlob;\n    }\n  } catch (e) {}\n  return path.join(maybeGlob, suffix);\n}\n\n\n/** Creates a task that runs the TypeScript compiler */\nexport function tsBuildTask(tsConfigPath: string) {\n  return execNodeTask('typescript', 'tsc', ['-p', tsConfigPath]);\n}\n\n\n/** Create a SASS Build Task. */\nexport function sassBuildTask(dest: string, root: string, minify = false) {\n  return () => {\n    return gulp.src(_globify(root, '**/*.scss'))\n      .pipe(gulpSourcemaps.init({ loadMaps: true }))\n      .pipe(gulpSass().on('error', gulpSass.logError))\n      .pipe(gulpIf(minify, gulpCleanCss()))\n      .pipe(gulpSourcemaps.write('.'))\n      .pipe(gulp.dest(dest));\n  };\n}\n\n\n/** Options that can be passed to execTask or execNodeTask. */\nexport interface ExecTaskOptions {\n  // Whether to output to STDERR and STDOUT.\n  silent?: boolean;\n  // If an error happens, this will replace the standard error.\n  errMessage?: string;\n}\n\n/** Create a task that executes a binary as if from the command line. */\nexport function execTask(binPath: string, args: string[], options: ExecTaskOptions = {}) {\n  return (done: (err?: string) => void) => {\n    const childProcess = child_process.spawn(binPath, args);\n\n    if (!options.silent) {\n      childProcess.stdout.on('data', (data: string) => {\n        process.stdout.write(data);\n      });\n\n      childProcess.stderr.on('data', (data: string) => {\n        process.stderr.write(data);\n      });\n    }\n\n    childProcess.on('close', (code: number) => {\n      if (code != 0) {\n        if (options.errMessage === undefined) {\n          done('Process failed with code ' + code);\n        } else {\n          done(options.errMessage);\n        }\n      } else {\n        done();\n      }\n    });\n  };\n}\n\n/**\n * Create a task that executes an NPM Bin, by resolving the binary path then executing it. These are\n * binaries that are normally in the `./node_modules/.bin` directory, but their name might differ\n * from the package. Examples are typescript, ngc and gulp itself.\n */\nexport function execNodeTask(packageName: string, executable: string | string[], args?: string[],\n                             options: ExecTaskOptions = {}) {\n  if (!args) {\n    args = <string[]>executable;\n    executable = undefined;\n  }\n\n  return (done: (err: any) => void) => {\n    resolveBin(packageName, { executable: executable }, (err: any, binPath: string) => {\n      if (err) {\n        done(err);\n      } else {\n        // Execute the node binary within a new child process using spawn.\n        // The binary needs to be `node` because on Windows the shell cannot determine the correct\n        // interpreter from the shebang.\n        execTask('node', [binPath].concat(args), options)(done);\n      }\n    });\n  };\n}\n\n\n/** Copy files from a glob to a destination. */\nexport function copyTask(srcGlobOrDir: string | string[], outRoot: string) {\n  if (typeof srcGlobOrDir === 'string') {\n    return () => gulp.src(_globify(srcGlobOrDir)).pipe(gulp.dest(outRoot));\n  } else {\n    return () => gulp.src(srcGlobOrDir.map(name => _globify(name))).pipe(gulp.dest(outRoot));\n  }\n}\n\n\n/** Delete files. */\nexport function cleanTask(glob: string) {\n  return () => gulp.src(glob, { read: false }).pipe(gulpClean(null));\n}\n\n\n/** Build an task that depends on all application build tasks. */\nexport function buildAppTask(appName: string) {\n  const buildTasks = ['ts', 'scss', 'assets']\n    .map(taskName => `:build:${appName}:${taskName}`)\n    .filter(taskName => gulp.hasTask(taskName));\n\n  return (done: () => void) => {\n    gulpRunSequence(\n      'clean',\n      'library:build',\n      [...buildTasks],\n      done\n    );\n  };\n}\n\n\n/** Create a task that copies vendor files in the proper destination. */\nexport function vendorTask(outDir = path.join(DIST_ROOT, 'vendor')) {\n  return () => gulpMerge(\n    NPM_VENDOR_FILES.map(pkg => {\n      const glob = path.join(PROJECT_ROOT, 'node_modules', pkg, '**/*.+(js|js.map)');\n      return gulp.src(glob).pipe(gulp.dest(path.join(outDir, pkg)));\n    }));\n}\n\n/**\n * Create a task that serves a given directory in the project.\n * The server rewrites all node_module/ or dist/ requests to the correct directory.\n */\nexport function serverTask(packagePath: string, livereload = true) {\n  // The http-rewrite-middlware only supports relative paths as rewrite destinations.\n  let relativePath = path.relative(PROJECT_ROOT, packagePath);\n\n  return () => {\n    gulpConnect.server({\n      root: PROJECT_ROOT,\n      livereload: livereload,\n      port: 4200,\n      fallback: path.join(packagePath, 'index.html'),\n      middleware: () => {\n        return [httpRewrite.getMiddleware([\n          { from: '^/node_modules/(.*)$', to: '/node_modules/$1' },\n          { from: '^/dist/(.*)$', to: '/dist/$1' },\n          { from: '^(.*)$', to: `/${relativePath}/$1` }\n        ])];\n      }\n    });\n  };\n}\n\n/** Triggers a reload when livereload is enabled and a gulp-connect server is running. */\nexport function triggerLivereload() {\n  gulp.src('dist').pipe(gulpConnect.reload());\n}\n\n\n/** Create a task that's a sequence of other tasks. */\nexport function sequenceTask(...args: any[]) {\n  return (done: any) => {\n    gulpRunSequence(\n      ...args,\n      done\n    );\n  };\n}\n"]}