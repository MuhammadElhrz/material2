{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/library.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/library.ts"],"names":[],"mappings":"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","sourcesContent":["import {task, watch} from 'gulp';\nimport {join} from 'path';\nimport {main as tsc} from '@angular/tsc-wrapped';\nimport {SOURCE_ROOT, DIST_BUNDLES, DIST_MATERIAL} from '../constants';\nimport {sequenceTask, sassBuildTask, copyTask, triggerLivereload} from '../util/task_helpers';\nimport {createRollupBundle} from '../util/rollup-helper';\nimport {transpileFile} from '../util/ts-compiler';\nimport {ScriptTarget, ModuleKind} from 'typescript';\nimport {writeFileSync} from 'fs';\n\n// There are no type definitions available for these imports.\nconst inlineResources = require('../../../scripts/release/inline-resources');\nconst uglify = require('uglify-js');\n\nconst libraryRoot = join(SOURCE_ROOT, 'lib');\nconst tsconfigPath = join(libraryRoot, 'tsconfig.json');\n\n// Paths to the different output directories.\nconst materialDir = DIST_MATERIAL;\nconst bundlesDir = DIST_BUNDLES;\n\nconst esmMainFile = join(materialDir, 'index.js');\n\ntask('library:build', sequenceTask(\n  'clean',\n  ['library:build:esm', 'library:assets'],\n  // Inline assets into ESM output.\n  'library:assets:inline',\n  // Build bundles on top of inlined ESM output.\n  'library:build:bundles',\n));\n\n/** [Watch task] Rebuilds the library whenever TS, SCSS, or HTML files change. */\ntask('library:watch', () => {\n  watch(join(libraryRoot, '**/*.ts'), ['library:build', triggerLivereload]);\n  watch(join(libraryRoot, '**/*.scss'), ['library:build', triggerLivereload]);\n  watch(join(libraryRoot, '**/*.html'), ['library:build', triggerLivereload]);\n});\n\n/**\n * TypeScript compilation tasks. Tasks are creating ESM, FESM, UMD bundles for releases.\n **/\n\ntask('library:build:esm', () => tsc(tsconfigPath, {basePath: libraryRoot}));\ntask('library:build:bundles', () => buildModuleEntry(esmMainFile));\n\n/** Builds a module entry-point. If no entry name is specified it builds the whole library. */\nasync function buildModuleEntry(entryFile: string, entryName = '') {\n  let baseFileName = entryName ? `material-${entryName}` : 'material';\n  let moduleName = entryName ? `ng.material.${entryName}` : 'ng.material';\n\n  // List of paths for the specified entrypoint.\n  let fesm2015File = join(bundlesDir, `${baseFileName}.js`);\n  let fesm2014File = join(bundlesDir, `${baseFileName}.es5.js`);\n  let umdFile = join(bundlesDir, `${baseFileName}.umd.js`);\n  let umdMinFile = join(bundlesDir, `${baseFileName}.umd.min.js`);\n\n  // Build FESM-2015 bundle file.\n  await createRollupBundle({\n    moduleName: moduleName,\n    entry: entryFile,\n    dest: fesm2015File,\n    format: 'es',\n  });\n\n  // Downlevel FESM-2015 file to ES5.\n  transpileFile(fesm2015File, fesm2014File, {\n    target: ScriptTarget.ES5,\n    module: ModuleKind.ES2015,\n    allowJs: true\n  });\n\n  // Create UMD bundle of FESM-2014 output.\n  await createRollupBundle({\n    moduleName: moduleName,\n    entry: fesm2014File,\n    dest: umdFile,\n    format: 'umd'\n  });\n\n  // Output a minified version of the UMD bundle\n  writeFileSync(umdMinFile, uglify.minify(umdFile, { preserveComments: 'license' }).code);\n}\n\n/**\n * Asset tasks. Building SaSS files and inlining CSS, HTML files into the ESM output.\n **/\n\ntask('library:assets', ['library:assets:scss', 'library:assets:html']);\n\ntask('library:assets:scss', sassBuildTask(materialDir, libraryRoot, true));\ntask('library:assets:html', copyTask(join(libraryRoot, '**/*.+(html|scss)'), materialDir));\ntask('library:assets:inline', () => inlineResources(materialDir));\n"]}