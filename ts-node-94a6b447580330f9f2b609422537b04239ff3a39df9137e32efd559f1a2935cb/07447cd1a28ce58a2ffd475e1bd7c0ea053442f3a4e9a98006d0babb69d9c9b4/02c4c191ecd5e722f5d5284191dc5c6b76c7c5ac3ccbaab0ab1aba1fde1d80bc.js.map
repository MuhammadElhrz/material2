{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/coverage.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/coverage.ts"],"names":[],"mappings":";AAAA,6BAA0B;AAC1B,qCAAoC;AACpC,0CAAkD;AAClD,+CAAwC;AACxC,+CAAoD;AACpD,6CAA+D;AAE/D,WAAI,CAAC,iBAAiB,EAAE;IACtB,EAAE,CAAC,CAAC,CAAC,qBAAU,CAAC,gCAAoB,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACtD,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,6BAAiB,EAAE,CAAC,CAAC,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;IAC1F,CAAC;IAED,IAAI,OAAO,GAAG,OAAO,CAAC,gCAAoB,CAAC,CAAC,OAAO,CAAC,CAAC;IAErD,0FAA0F;IAC1F,OAAO,OAAO,CAAC,cAAc,CAAC,CAAC;IAE/B,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC;AAEH,6DAA6D;AAC7D,uBAAuB,OAAY;IACjC,IAAI,SAAS,GAAG,yBAAS,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;IACjF,IAAI,QAAQ,GAAG,wCAA6B,EAAE,CAAC;IAE/C,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;SAClE,IAAI,CAAC,cAAM,OAAA,QAAQ,CAAC,SAAS,EAAE,EAApB,CAAoB,EAAE,cAAM,OAAA,QAAQ,CAAC,SAAS,EAAE,EAApB,CAAoB,CAAC,CAAC;AAClE,CAAC;AAED,kGAAkG;AAClG,gGAAgG","sourcesContent":["import {task} from 'gulp';\nimport {existsSync} from 'fs-extra';\nimport {COVERAGE_RESULT_FILE} from '../constants';\nimport {spawnSync} from 'child_process';\nimport {isTravisPushBuild} from '../util/travis-ci';\nimport {openFirebaseDashboardDatabase} from '../util/firebase';\n\ntask('coverage:upload', () => {\n  if (!existsSync(COVERAGE_RESULT_FILE)) {\n    throw new Error('No coverage file has been found!');\n  }\n\n  if (!isTravisPushBuild()) {\n    throw new Error('Coverage results will be only uploaded inside of Travis Push builds.');\n  }\n\n  let results = require(COVERAGE_RESULT_FILE)['total'];\n\n  // To reduce database payload, the covered lines won't be pushed to the Firebase database.\n  delete results['linesCovered'];\n\n  return uploadResults(results);\n});\n\n/** Uploads the coverage results to the firebase database. */\nfunction uploadResults(results: any): Promise<void> {\n  let latestSha = spawnSync('git', ['rev-parse', 'HEAD']).stdout.toString().trim();\n  let database = openFirebaseDashboardDatabase();\n\n  return database.ref('coverage-reports').child(latestSha).set(results)\n    .then(() => database.goOffline(), () => database.goOffline());\n}\n\n// TODO(devversion): In the future we might have a big database where we can store full summaries.\n// TODO(devversion): We could also move the coverage to a bot and reply with the results on PRs.\n"]}