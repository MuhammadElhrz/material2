{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/coverage.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/coverage.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,IAAI,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC1C,IAAI,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC/C,IAAI,WAAW,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC/C,IAAI,UAAU,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAC7C,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;IAC3B,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACxD,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;IAC5F,CAAC;IACD,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC;IACjE,0FAA0F;IAC1F,OAAO,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/B,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AACH,6DAA6D;AAC7D,uBAAuB,OAAO;IAC1B,IAAI,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;IACjG,IAAI,QAAQ,GAAG,UAAU,CAAC,6BAA6B,EAAE,CAAC;IAC1D,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;SAChE,IAAI,CAAC,cAAc,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,cAAc,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1G,CAAC;AACD,kGAAkG;AAClG,gGAAgG;AAChG,uLAAuL","sourcesContent":["\"use strict\";\nvar gulp_1 = require('gulp');\nvar fs_extra_1 = require('fs-extra');\nvar constants_1 = require('../constants');\nvar child_process_1 = require('child_process');\nvar travis_ci_1 = require('../util/travis-ci');\nvar firebase_1 = require('../util/firebase');\ngulp_1.task('coverage:upload', function () {\n    if (!fs_extra_1.existsSync(constants_1.COVERAGE_RESULT_FILE)) {\n        throw new Error('No coverage file has been found!');\n    }\n    if (!travis_ci_1.isTravisPushBuild()) {\n        throw new Error('Coverage results will be only uploaded inside of Travis Push builds.');\n    }\n    var results = require(constants_1.COVERAGE_RESULT_FILE)['total'];\n    // To reduce database payload, the covered lines won't be pushed to the Firebase database.\n    delete results['linesCovered'];\n    return uploadResults(results);\n});\n/** Uploads the coverage results to the firebase database. */\nfunction uploadResults(results) {\n    var latestSha = child_process_1.spawnSync('git', ['rev-parse', 'HEAD']).stdout.toString().trim();\n    var database = firebase_1.openFirebaseDashboardDatabase();\n    return database.ref('coverage-reports').child(latestSha).set(results)\n        .then(function () { return database.goOffline(); }, function () { return database.goOffline(); });\n}\n// TODO(devversion): In the future we might have a big database where we can store full summaries.\n// TODO(devversion): We could also move the coverage to a bot and reply with the results on PRs.\n//# sourceMappingURL=/mnt/c/basidia/material2/ts-node-1fc90f464345a82d8eb8eee0683b64cadfb994e7/8ec14c99540029fe2441b6e9a03607d304e79046/a2e528bc446afcb3525413008b55577342980fec.js.map"]}