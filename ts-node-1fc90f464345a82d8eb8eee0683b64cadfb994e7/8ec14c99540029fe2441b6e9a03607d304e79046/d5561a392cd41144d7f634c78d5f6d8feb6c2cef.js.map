{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/e2e.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/e2e.ts"],"names":[],"mappings":";AAAA,qBAA0B,MAAM,CAAC,CAAA;AACjC,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,0BAAmD,cAAc,CAAC,CAAA;AAClE,6BAGO,sBAAsB,CAAC,CAAA;AAE9B,IAAM,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAChD,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE5C,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,uBAAW,EAAE,SAAS,CAAC,CAAC;AACjD,IAAM,MAAM,GAAG,qBAAS,CAAC;AACzB,IAAM,sBAAsB,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAY,EAAE,yBAAyB,CAAC,CAAC;AAElF,IAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAExD,WAAI,CAAC,eAAe,EAAE;IACpB,YAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAC1D,YAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC;AAEH,mDAAmD;AACnD,WAAI,CAAC,sBAAsB,EAAE,yBAAU,EAAE,CAAC,CAAC;AAE3C,+BAA+B;AAC/B,WAAI,CAAC,kBAAkB,EAAE,0BAAW,CAAC,YAAY,CAAC,CAAC,CAAC;AAEpD,yDAAyD;AACzD,WAAI,CAAC,sBAAsB,EAAE,uBAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAEvD,iCAAiC;AACjC,WAAI,CAAC,cAAc,EAAE,2BAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;AAE7C,+DAA+D;AAC/D,WAAI,CAAC,wBAAwB,EAAE,2BAAY,CAAC,YAAY,EAAE,mBAAmB,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAE5F,qEAAqE;AACrE,WAAI,CAAC,kBAAkB,EAAE,2BAAY,CAAC,YAAY,EAAE,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;AAE/E,oCAAoC;AACpC,WAAI,CAAC,eAAe,EAAE,yBAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAEzC,oCAAoC;AACpC,WAAI,CAAC,oBAAoB,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;AAEpD,qCAAqC;AACrC,WAAI,CAAC,cAAc,EAAE,2BAAY,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC;AAEpE;;;GAGG;AACH,WAAI,CAAC,oBAAoB,EAAE,CAAC,cAAc,EAAE,mBAAmB,EAAE,eAAe,CAAC,CAAC,CAAC;AAEnF;;GAEG;AACH,WAAI,CAAC,KAAK,EAAE,UAAC,IAA4B;IACvC,eAAe,CACb,wBAAwB,EACxB,cAAc,EACd,kBAAkB,EAClB,oBAAoB,EACpB,UAAC,GAAQ,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,EAAT,CAAS,CACxB,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import {task, watch} from 'gulp';\r\nimport * as path from 'path';\r\n\r\nimport {SOURCE_ROOT, DIST_ROOT, PROJECT_ROOT} from '../constants';\r\nimport {\r\n  tsBuildTask, copyTask, buildAppTask, execNodeTask,\r\n  vendorTask, sequenceTask, serverTask\r\n} from '../util/task_helpers';\r\n\r\nconst gulpRunSequence = require('run-sequence');\r\nconst gulpConnect = require('gulp-connect');\r\n\r\nconst appDir = path.join(SOURCE_ROOT, 'e2e-app');\r\nconst outDir = DIST_ROOT;\r\nconst PROTRACTOR_CONFIG_PATH = path.join(PROJECT_ROOT, 'test/protractor.conf.js');\r\n\r\nconst tsconfigPath = path.join(appDir, 'tsconfig.json');\r\n\r\ntask(':watch:e2eapp', () => {\r\n  watch(path.join(appDir, '**/*.ts'), [':build:e2eapp:ts']);\r\n  watch(path.join(appDir, '**/*.html'), [':build:e2eapp:assets']);\r\n});\r\n\r\n/** Copies e2e app dependencies to build output. */\r\ntask(':build:e2eapp:vendor', vendorTask());\r\n\r\n/** Builds e2e app ts to js. */\r\ntask(':build:e2eapp:ts', tsBuildTask(tsconfigPath));\r\n\r\n/** Copies e2e app assets (html, css) to build output. */\r\ntask(':build:e2eapp:assets', copyTask(appDir, outDir));\r\n\r\n/** Builds the entire e2e app. */\r\ntask('build:e2eapp', buildAppTask('e2eapp'));\r\n\r\n/** Ensures that protractor and webdriver are set up to run. */\r\ntask(':test:protractor:setup', execNodeTask('protractor', 'webdriver-manager', ['update']));\r\n\r\n/** Runs protractor tests (assumes that server is already running. */\r\ntask(':test:protractor', execNodeTask('protractor', [PROTRACTOR_CONFIG_PATH]));\r\n\r\n/** Starts up the e2e app server. */\r\ntask(':serve:e2eapp', serverTask(false));\r\n\r\n/** Terminates the e2e app server */\r\ntask(':serve:e2eapp:stop', gulpConnect.serverClose);\r\n\r\n/** Builds and serves the e2e app. */\r\ntask('serve:e2eapp', sequenceTask('build:e2eapp', ':serve:e2eapp'));\r\n\r\n/**\r\n * [Watch task] Builds and serves e2e app, rebuilding whenever the sources change.\r\n * This should only be used when running e2e tests locally.\r\n */\r\ntask('serve:e2eapp:watch', ['serve:e2eapp', ':watch:components', ':watch:e2eapp']);\r\n\r\n/**\r\n * Builds and serves the e2e-app and runs protractor once the e2e-app is ready.\r\n */\r\ntask('e2e', (done: (err?: string) => void) => {\r\n  gulpRunSequence(\r\n    ':test:protractor:setup',\r\n    'serve:e2eapp',\r\n    ':test:protractor',\r\n    ':serve:e2eapp:stop',\r\n    (err: any) => done(err)\r\n  );\r\n});\r\n"]}