{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/util/firebase.ts","sources":["/mnt/c/basidia/material2/tools/gulp/util/firebase.ts"],"names":[],"mappings":";AAAA,IAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAChD,IAAM,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAEvC,4DAA4D;AAC5D;IACE,8DAA8D;IAC9D,8FAA8F;IAC9F,aAAa,CAAC,aAAa,CAAC;QAC1B,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC;YACxC,UAAU,EAAE,qBAAqB;YACjC,YAAY,EAAE,qEAAqE;YACnF,sFAAsF;YACtF,sEAAsE;YACtE,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;SACzF,CAAC;QACF,WAAW,EAAE,4CAA4C;KAC1D,CAAC,CAAC;IAEH,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AAClC,CAAC;AAfe,qCAA6B,gCAe5C,CAAA;AAED;;;GAGG;AACH;IACE,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC;QACvB,SAAS,EAAE,uBAAuB;QAClC,WAAW,EAAE;YACX,YAAY,EAAE,uEAAuE;YACrF,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;SACtE;KACF,CAAC,CAAC;IAEH,yCAAyC;IACzC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;AACzD,CAAC;AAXe,6BAAqB,wBAWpC,CAAA;AAED,mEAAmE;AACnE;IACE,8DAA8D;IAC9D,8FAA8F;IAC9F,IAAI,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC;QAC9C,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC;YACxC,UAAU,EAAE,uBAAuB;YACnC,YAAY,EAAE,uEAAuE;YACrF,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;SACtE,CAAC;QACF,WAAW,EAAE,8CAA8C;KAC5D,EAAE,uBAAuB,CAAC,CAAC;IAE5B,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AAClC,CAAC;AAbe,uCAA+B,kCAa9C,CAAA;AAED,oEAAoE;AACpE,gBAAuB,GAAW;IAChC,sFAAsF;IACtF,sEAAsE;IACtE,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC9E,CAAC;AAJe,cAAM,SAIrB,CAAA","sourcesContent":["const firebaseAdmin = require('firebase-admin');\r\nconst gcloud = require('google-cloud');\r\n\r\n/** Opens a connection to the firebase realtime database. */\r\nexport function openFirebaseDashboardDatabase() {\r\n  // Initialize the Firebase application with admin credentials.\r\n  // Credentials need to be for a Service Account, which can be created in the Firebase console.\r\n  firebaseAdmin.initializeApp({\r\n    credential: firebaseAdmin.credential.cert({\r\n      project_id: 'material2-dashboard',\r\n      client_email: 'firebase-adminsdk-ch1ob@material2-dashboard.iam.gserviceaccount.com',\r\n      // In Travis CI the private key will be incorrect because the line-breaks are escaped.\r\n      // The line-breaks need to persist in the service account private key.\r\n      private_key: (process.env['MATERIAL2_FIREBASE_PRIVATE_KEY'] || '').replace(/\\\\n/g, '\\n')\r\n    }),\r\n    databaseURL: 'https://material2-dashboard.firebaseio.com'\r\n  });\r\n\r\n  return firebaseAdmin.database();\r\n}\r\n\r\n/**\r\n * Open Google Cloud Storage for screenshots.\r\n * The files uploaded to google cloud are also available to firebase storage.\r\n */\r\nexport function openScreenshotsBucket() {\r\n  let gcs = gcloud.storage({\r\n    projectId: 'material2-screenshots',\r\n    credentials: {\r\n      client_email: 'firebase-adminsdk-t4209@material2-screenshots.iam.gserviceaccount.com',\r\n      private_key: decode(process.env['MATERIAL2_SCREENSHOT_FIREBASE_KEY'])\r\n    },\r\n  });\r\n\r\n  // Reference the existing appspot bucket.\r\n  return gcs.bucket('material2-screenshots.appspot.com');\r\n}\r\n\r\n/** Opens a connection to the firebase database for screenshots. */\r\nexport function openFirebaseScreenshotsDatabase() {\r\n  // Initialize the Firebase application with admin credentials.\r\n  // Credentials need to be for a Service Account, which can be created in the Firebase console.\r\n  let screenshotApp = firebaseAdmin.initializeApp({\r\n    credential: firebaseAdmin.credential.cert({\r\n      project_id: 'material2-screenshots',\r\n      client_email: 'firebase-adminsdk-t4209@material2-screenshots.iam.gserviceaccount.com',\r\n      private_key: decode(process.env['MATERIAL2_SCREENSHOT_FIREBASE_KEY'])\r\n    }),\r\n    databaseURL: 'https://material2-screenshots.firebaseio.com'\r\n  }, 'material2-screenshots');\r\n\r\n  return screenshotApp.database();\r\n}\r\n\r\n/** Decodes a Travis CI variable that is public in favor for PRs. */\r\nexport function decode(str: string): string {\r\n  // In Travis CI the private key will be incorrect because the line-breaks are escaped.\r\n  // The line-breaks need to persist in the service account private key.\r\n  return (str || '').split('\\\\n').reverse().join('\\\\n').replace(/\\\\n/g, '\\n');\r\n}\r\n\r\n"]}