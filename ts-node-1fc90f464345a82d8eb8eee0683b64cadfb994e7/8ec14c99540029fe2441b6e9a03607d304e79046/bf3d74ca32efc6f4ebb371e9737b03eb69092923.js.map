{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/payload.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/payload.ts"],"names":[],"mappings":";AAAA,qBAAmB,MAAM,CAAC,CAAA;AAC1B,qBAAmB,MAAM,CAAC,CAAA;AAC1B,mBAAqC,IAAI,CAAC,CAAA;AAC1C,0BAAmC,cAAc,CAAC,CAAA;AAClD,8BAAwB,eAAe,CAAC,CAAA;AACxC,0BAAgC,mBAAmB,CAAC,CAAA;AACpD,yBAA4C,kBAAkB,CAAC,CAAA;AAE/D,6DAA6D;AAC7D,IAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAEtC,IAAM,WAAW,GAAG,WAAI,CAAC,gCAAoB,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;AAE7E,8DAA8D;AAC9D,WAAI,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC,EAAE;IAEjC,IAAI,OAAO,GAAG;QACZ,MAAM,EAAE,WAAW,CAAC,WAAW,CAAC;QAChC,sBAAsB,EAAE,eAAe,CAAC,WAAW,CAAC;QACpD,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACtB,CAAC;IAEF,mEAAmE;IACnE,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAElE,0EAA0E;IAC1E,EAAE,CAAC,CAAC,6BAAiB,EAAE,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;AAEH,CAAC,CAAC,CAAC;AAEH,+CAA+C;AAC/C,qBAAqB,QAAgB;IACnC,MAAM,CAAC,aAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;AACxC,CAAC;AAED,8DAA8D;AAC9D,yBAAyB,QAAgB;IACvC,IAAI,WAAW,GAAG,iBAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAElD,IAAI,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE;QAChD,UAAU,EAAE,IAAI;KACjB,CAAC,CAAC;IAEH,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;AAC/D,CAAC;AAED,4DAA4D;AAC5D,wBAAwB,OAAY;IAClC,IAAI,SAAS,GAAG,yBAAS,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;IACjF,IAAI,QAAQ,GAAG,wCAA6B,EAAE,CAAC;IAE/C,2EAA2E;IAC3E,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;SAC1D,IAAI,CAAC,cAAM,OAAA,QAAQ,CAAC,SAAS,EAAE,EAApB,CAAoB,EAAE,cAAM,OAAA,QAAQ,CAAC,SAAS,EAAE,EAApB,CAAoB,CAAC,CAAC;AAClE,CAAC","sourcesContent":["import {task} from 'gulp';\r\nimport {join} from 'path';\r\nimport {statSync, readFileSync} from 'fs';\r\nimport {DIST_COMPONENTS_ROOT} from '../constants';\r\nimport {spawnSync} from 'child_process';\r\nimport {isTravisPushBuild} from '../util/travis-ci';\r\nimport {openFirebaseDashboardDatabase} from '../util/firebase';\r\n\r\n// There are no type definitions available for these imports.\r\nconst uglifyJs = require('uglify-js');\r\n\r\nconst BUNDLE_PATH = join(DIST_COMPONENTS_ROOT, 'bundles', 'material.umd.js');\r\n\r\n/** Task which runs test against the size of whole library. */\r\ntask('payload', ['build:release'], () => {\r\n\r\n  let results = {\r\n    umd_kb: getFilesize(BUNDLE_PATH),\r\n    umd_minified_uglify_kb: getUglifiedSize(BUNDLE_PATH),\r\n    timestamp: Date.now()\r\n  };\r\n\r\n  // Print the results to the console, so we can read it from the CI.\r\n  console.log('Payload Results:', JSON.stringify(results, null, 2));\r\n\r\n  // Publish the results to firebase when it runs on Travis and not as a PR.\r\n  if (isTravisPushBuild()) {\r\n    return publishResults(results);\r\n  }\r\n\r\n});\r\n\r\n/** Returns the size of a file in kilobytes. */\r\nfunction getFilesize(filePath: string) {\r\n  return statSync(filePath).size / 1000;\r\n}\r\n\r\n/** Returns the size of a uglify minified file in kilobytes */\r\nfunction getUglifiedSize(filePath: string) {\r\n  let fileContent = readFileSync(filePath, 'utf-8');\r\n\r\n  let compressedFile = uglifyJs.minify(fileContent, {\r\n    fromString: true\r\n  });\r\n\r\n  return Buffer.byteLength(compressedFile.code, 'utf8') / 1000;\r\n}\r\n\r\n/** Publishes the given results to the firebase database. */\r\nfunction publishResults(results: any) {\r\n  let latestSha = spawnSync('git', ['rev-parse', 'HEAD']).stdout.toString().trim();\r\n  let database = openFirebaseDashboardDatabase();\r\n\r\n  // Write the results to the payloads object with the latest Git SHA as key.\r\n  return database.ref('payloads').child(latestSha).set(results)\r\n    .then(() => database.goOffline(), () => database.goOffline());\r\n}\r\n"]}