{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/unit-test.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/unit-test.ts"],"names":[],"mappings":"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","sourcesContent":["import gulp = require('gulp');\r\nimport path = require('path');\r\nimport gulpMerge = require('merge2');\r\n\r\nimport {PROJECT_ROOT, COMPONENTS_DIR} from '../constants';\r\nimport {sequenceTask} from '../util/task_helpers';\r\n\r\nconst karma = require('karma');\r\nconst runSequence = require('run-sequence');\r\n\r\n/** Copies deps for unit tests to the build output. */\r\ngulp.task(':build:test:vendor', function() {\r\n  const npmVendorFiles = [\r\n    '@angular', 'core-js/client', 'hammerjs', 'rxjs', 'systemjs/dist', 'zone.js/dist'\r\n  ];\r\n\r\n  return gulpMerge(\r\n    npmVendorFiles.map(function(root) {\r\n      const glob = path.join(root, '**/*.+(js|js.map)');\r\n      return gulp.src(path.join('node_modules', glob))\r\n        .pipe(gulp.dest(path.join('dist/vendor', root)));\r\n    }));\r\n});\r\n\r\n/** Builds dependencies for unit tests. */\r\ngulp.task(':test:deps', sequenceTask(\r\n  'clean',\r\n  [\r\n    ':build:test:vendor',\r\n    ':build:components:assets',\r\n    ':build:components:scss',\r\n    ':build:components:ts:spec',\r\n  ]\r\n));\r\n\r\n\r\n/** Build unit test dependencies and then inlines resources (html, css) into the JS output. */\r\ngulp.task(':test:deps:inline', sequenceTask(':test:deps', ':inline-resources'));\r\n\r\n/**\r\n * Runs the unit tests once with inlined resources (html, css). Does not watch for changes.\r\n *\r\n * This task should be used when running tests on the CI server.\r\n */\r\ngulp.task('test:single-run', [':test:deps:inline'], (done: () => void) => {\r\n  new karma.Server({\r\n    configFile: path.join(PROJECT_ROOT, 'test/karma.conf.js'),\r\n    singleRun: true\r\n  }, (exitCode: number) => {\r\n    // Immediately exit the process if Karma reported errors, because due to\r\n    // potential still running tunnel-browsers gulp won't exit properly.\r\n    exitCode === 0 ? done() : process.exit(exitCode);\r\n  }).start();\r\n});\r\n\r\n/**\r\n * [Watch task] Runs the unit tests, rebuilding and re-testing when sources change.\r\n * Does not inline resources. Note that this doesn't use Karma's built-in file\r\n * watching. Due to the way our build process is set up, Karma ends up firing\r\n * it's change detection for every file that is written to disk, which causes\r\n * it to run tests multiple time and makes it hard to follow the console output.\r\n * This approach runs the Karma server and then depends on the Gulp API to tell\r\n * Karma when to run the tests.\r\n *\r\n * This task should be used when running unit tests locally.\r\n */\r\ngulp.task('test', [':test:deps'], () => {\r\n  let patternRoot = path.join(COMPONENTS_DIR, '**/*');\r\n\r\n  // Configure the Karma server and override the autoWatch and singleRun just in case.\r\n  let server = new karma.Server({\r\n    configFile: path.join(PROJECT_ROOT, 'test/karma.conf.js'),\r\n    autoWatch: false,\r\n    singleRun: false\r\n  });\r\n\r\n  // Refreshes Karma's file list and schedules a test run.\r\n  // Tests will only run if TypeScript compilation was successful.\r\n  let runTests = (err?: Error) => {\r\n    if (!err) {\r\n      server.refreshFiles().then(() => server._injector.get('executor').schedule());\r\n    }\r\n  };\r\n\r\n  // Boot up the test server and run the tests whenever a new browser connects.\r\n  server.start();\r\n  server.on('browser_register', () => runTests());\r\n\r\n  // Watch for file changes, rebuild and run the tests.\r\n  gulp.watch(patternRoot + '.ts', () => runSequence(':build:components:ts:spec', runTests));\r\n  gulp.watch(patternRoot + '.scss', () => runSequence(':build:components:scss', runTests));\r\n  gulp.watch(patternRoot + '.html', () => runSequence(':build:components:assets', runTests));\r\n});\r\n"]}