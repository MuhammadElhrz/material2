{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/util/task_helpers.ts","sources":["/mnt/c/basidia/material2/tools/gulp/util/task_helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as child_process from 'child_process';\r\nimport * as fs from 'fs';\r\nimport * as gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport {NPM_VENDOR_FILES, PROJECT_ROOT, DIST_ROOT} from '../constants';\r\nimport {CompilerOptions} from 'typescript';\r\nimport {compileProject} from './ts-compiler';\r\n\r\n/* Those imports lack typings. */\r\nconst gulpClean = require('gulp-clean');\r\nconst gulpMerge = require('merge2');\r\nconst gulpRunSequence = require('run-sequence');\r\nconst gulpSass = require('gulp-sass');\r\nconst gulpSourcemaps = require('gulp-sourcemaps');\r\nconst gulpConnect = require('gulp-connect');\r\nconst gulpIf = require('gulp-if');\r\nconst gulpCleanCss = require('gulp-clean-css');\r\n\r\nconst resolveBin = require('resolve-bin');\r\n\r\n/** If the string passed in is a glob, returns it, otherwise append '**\\/*' to it. */\r\nfunction _globify(maybeGlob: string, suffix = '**/*') {\r\n  if (maybeGlob.indexOf('*') != -1) {\r\n    return maybeGlob;\r\n  }\r\n  try {\r\n    const stat = fs.statSync(maybeGlob);\r\n    if (stat.isFile()) {\r\n      return maybeGlob;\r\n    }\r\n  } catch (e) {}\r\n  return path.join(maybeGlob, suffix);\r\n}\r\n\r\n\r\n/** Creates a task that runs the TypeScript compiler */\r\nexport function tsBuildTask(tsConfigPath: string, extraOptions?: CompilerOptions) {\r\n  return () => compileProject(tsConfigPath, extraOptions);\r\n}\r\n\r\n\r\n/** Create a SASS Build Task. */\r\nexport function sassBuildTask(dest: string, root: string, minify = false) {\r\n  return () => {\r\n    return gulp.src(_globify(root, '**/*.scss'))\r\n      .pipe(gulpSourcemaps.init({ loadMaps: true }))\r\n      .pipe(gulpSass().on('error', gulpSass.logError))\r\n      .pipe(gulpIf(minify, gulpCleanCss()))\r\n      .pipe(gulpSourcemaps.write('.'))\r\n      .pipe(gulp.dest(dest));\r\n  };\r\n}\r\n\r\n\r\n/** Options that can be passed to execTask or execNodeTask. */\r\nexport interface ExecTaskOptions {\r\n  // Whether to output to STDERR and STDOUT.\r\n  silent?: boolean;\r\n  // If an error happens, this will replace the standard error.\r\n  errMessage?: string;\r\n}\r\n\r\n/** Create a task that executes a binary as if from the command line. */\r\nexport function execTask(binPath: string, args: string[], options: ExecTaskOptions = {}) {\r\n  return (done: (err?: string) => void) => {\r\n    const childProcess = child_process.spawn(binPath, args);\r\n\r\n    if (!options.silent) {\r\n      childProcess.stdout.on('data', (data: string) => {\r\n        process.stdout.write(data);\r\n      });\r\n\r\n      childProcess.stderr.on('data', (data: string) => {\r\n        process.stderr.write(data);\r\n      });\r\n    }\r\n\r\n    childProcess.on('close', (code: number) => {\r\n      if (code != 0) {\r\n        if (options.errMessage === undefined) {\r\n          done('Process failed with code ' + code);\r\n        } else {\r\n          done(options.errMessage);\r\n        }\r\n      } else {\r\n        done();\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Create a task that executes an NPM Bin, by resolving the binary path then executing it. These are\r\n * binaries that are normally in the `./node_modules/.bin` directory, but their name might differ\r\n * from the package. Examples are typescript, ngc and gulp itself.\r\n */\r\nexport function execNodeTask(packageName: string, executable: string | string[], args?: string[],\r\n                             options: ExecTaskOptions = {}) {\r\n  if (!args) {\r\n    args = <string[]>executable;\r\n    executable = undefined;\r\n  }\r\n\r\n  return (done: (err: any) => void) => {\r\n    resolveBin(packageName, { executable: executable }, (err: any, binPath: string) => {\r\n      if (err) {\r\n        done(err);\r\n      } else {\r\n        // Execute the node binary within a new child process using spawn.\r\n        // The binary needs to be `node` because on Windows the shell cannot determine the correct\r\n        // interpreter from the shebang.\r\n        execTask('node', [binPath].concat(args), options)(done);\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n\r\n/** Copy files from a glob to a destination. */\r\nexport function copyTask(srcGlobOrDir: string | string[], outRoot: string) {\r\n  if (typeof srcGlobOrDir === 'string') {\r\n    return () => gulp.src(_globify(srcGlobOrDir)).pipe(gulp.dest(outRoot));\r\n  } else {\r\n    return () => gulp.src(srcGlobOrDir.map(name => _globify(name))).pipe(gulp.dest(outRoot));\r\n  }\r\n}\r\n\r\n\r\n/** Delete files. */\r\nexport function cleanTask(glob: string) {\r\n  return () => gulp.src(glob, { read: false }).pipe(gulpClean(null));\r\n}\r\n\r\n\r\n/** Build an task that depends on all application build tasks. */\r\nexport function buildAppTask(appName: string) {\r\n  const buildTasks = ['vendor', 'ts', 'scss', 'assets']\r\n    .map(taskName => `:build:${appName}:${taskName}`)\r\n    .filter(taskName => gulp.hasTask(taskName));\r\n\r\n  return (done: () => void) => {\r\n    gulpRunSequence(\r\n      'clean',\r\n      'build:components',\r\n      [...buildTasks],\r\n      done\r\n    );\r\n  };\r\n}\r\n\r\n\r\n/** Create a task that copies vendor files in the proper destination. */\r\nexport function vendorTask() {\r\n  return () => gulpMerge(\r\n    NPM_VENDOR_FILES.map(root => {\r\n      const glob = path.join(PROJECT_ROOT, 'node_modules', root, '**/*.+(js|js.map)');\r\n      return gulp.src(glob).pipe(gulp.dest(path.join(DIST_ROOT, 'vendor', root)));\r\n    }));\r\n}\r\n\r\n/** Create a task that serves the dist folder. */\r\nexport function serverTask(livereload = true) {\r\n  return () => {\r\n    gulpConnect.server({\r\n      root: 'dist/',\r\n      livereload: livereload,\r\n      port: 4200,\r\n      fallback: 'dist/index.html'\r\n    });\r\n  };\r\n}\r\n\r\n/** Triggers a reload when livereload is enabled and a gulp-connect server is running. */\r\nexport function triggerLivereload() {\r\n  gulp.src('dist').pipe(gulpConnect.reload());\r\n}\r\n\r\n\r\n/** Create a task that's a sequence of other tasks. */\r\nexport function sequenceTask(...args: any[]) {\r\n  return (done: any) => {\r\n    gulpRunSequence(\r\n      ...args,\r\n      done\r\n    );\r\n  };\r\n}\r\n"]}