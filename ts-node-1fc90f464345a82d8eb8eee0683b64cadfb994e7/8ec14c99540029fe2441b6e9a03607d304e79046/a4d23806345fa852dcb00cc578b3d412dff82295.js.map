{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/docs.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/docs.ts"],"names":[],"mappings":"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","sourcesContent":["import {task, src, dest} from 'gulp';\nimport {Dgeni} from 'dgeni';\nimport * as path from 'path';\nimport {HTML_MINIFIER_OPTIONS} from '../constants';\n\n// There are no type definitions available for these imports.\nconst markdown = require('gulp-markdown');\nconst transform = require('gulp-transform');\nconst highlight = require('gulp-highlight-files');\nconst rename = require('gulp-rename');\nconst flatten = require('gulp-flatten');\nconst htmlmin = require('gulp-htmlmin');\nconst hljs = require('highlight.js');\nconst dom  = require('gulp-dom');\n\n// Our docs contain comments of the form `<!-- example(...) -->` which serve as placeholders where\n// example code should be inserted. We replace these comments with divs that have a\n// `material-docs-example` attribute which can be used to locate the divs and initialize the example\n// viewer.\nconst EXAMPLE_PATTERN = /<!--\\W*example\\(([^)]+)\\)\\W*-->/g;\n\n// Markdown files can contain links to other markdown files.\n// Most of those links don't work in the Material docs, because the paths are invalid in the\n// documentation page. Using a RegExp to rewrite links in HTML files to work in the docs.\nconst LINK_PATTERN = /(<a[^>]*) href=\"([^\"]*)\"/g;\n\n// HTML tags in the markdown generated files that should receive a .docs-markdown-${tagName} class\n// for styling purposes.\nconst MARKDOWN_TAGS_TO_CLASS_ALIAS = [\n  'a',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'li',\n  'ol',\n  'p',\n  'table',\n  'tbody',\n  'td',\n  'th',\n  'tr',\n  'ul'\n];\n\ntask('docs', ['markdown-docs', 'highlight-docs', 'api-docs', 'minify-html-docs']);\n\ntask('markdown-docs', () => {\n  return src(['src/lib/**/*.md', 'guides/*.md'])\n      .pipe(markdown({\n        // Add syntax highlight using highlight.js\n        highlight: (code: string, language: string) => {\n          if (language) {\n            // highlight.js expects \"typescript\" written out, while Github supports \"ts\".\n            let lang = language.toLowerCase() === 'ts' ? 'typescript' : language;\n            return hljs.highlight(lang, code).value;\n          }\n\n          return code;\n        }\n      }))\n      .pipe(transform(transformMarkdownFiles))\n      .pipe(dom(createTagNameAliaser('docs-markdown')))\n      .pipe(dest('dist/docs/markdown'));\n});\n\ntask('highlight-docs', () => {\n  // rename files to fit format: [filename]-[filetype].html\n  const renameFile = (path: any) => {\n    const extension = path.extname.slice(1);\n    path.basename = `${path.basename}-${extension}`;\n  };\n\n  return src('src/examples/**/*.+(html|css|ts)')\n      .pipe(flatten())\n      .pipe(rename(renameFile))\n      .pipe(highlight())\n      .pipe(dest('dist/docs/examples'));\n});\n\ntask('api-docs', () => {\n  const docsPackage = require(path.resolve(__dirname, '../../dgeni'));\n  const docs = new Dgeni([docsPackage]);\n  return docs.generate();\n});\n\ntask('minify-html-docs', ['api-docs'], () => {\n  return src('dist/docs/api/*.html')\n    .pipe(htmlmin(HTML_MINIFIER_OPTIONS))\n    .pipe(dest('dist/docs/api/'));\n});\n\n/** Updates the markdown file's content to work inside of the docs app. */\nfunction transformMarkdownFiles(buffer: Buffer, file: any): string {\n  let content = buffer.toString('utf-8');\n\n  /* Replace <!-- example(..) --> comments with HTML elements. */\n  content = content.replace(EXAMPLE_PATTERN, (match: string, name: string) =>\n    `<div material-docs-example=\"${name}\"></div>`\n  );\n\n  /* Replaces the URL in anchor elements inside of compiled markdown files. */\n  content = content.replace(LINK_PATTERN, (match: string, head: string, link: string) =>\n    // The head is the first match of the RegExp and is necessary to ensure that the RegExp matches\n    // an anchor element. The head will be then used to re-create the existing anchor element.\n    // If the head is not prepended to the replaced value, then the first match will be lost.\n    `${head} href=\"${fixMarkdownDocLinks(link, file.path)}\"`\n  );\n\n  return content;\n}\n\n/** Fixes paths in the markdown files to work in the material-docs-io. */\nfunction fixMarkdownDocLinks(link: string, filePath: string): string {\n  // As for now, only markdown links that are relative and inside of the guides/ directory\n  // will be rewritten.\n  if (!filePath.includes(path.normalize('guides/')) || link.startsWith('http')) {\n    return link;\n  }\n\n  let baseName = path.basename(link, path.extname(link));\n\n  // Temporary link the file to the /guide URL because that's the route where the\n  // guides can be loaded in the Material docs.\n  return `guide/${baseName}`;\n}\n\n/**\n * Returns a function to be called with an HTML document as its context that aliases HTML tags by\n * adding a class consisting of a prefix + the tag name.\n * @param classPrefix The prefix to use for the alias class.\n */\nfunction createTagNameAliaser(classPrefix: string) {\n  return function() {\n    MARKDOWN_TAGS_TO_CLASS_ALIAS.forEach(tag => {\n      for (let el of this.querySelectorAll(tag)) {\n        el.classList.add(`${classPrefix}-${tag}`);\n      }\n    });\n\n    return this;\n  };\n}\n"]}