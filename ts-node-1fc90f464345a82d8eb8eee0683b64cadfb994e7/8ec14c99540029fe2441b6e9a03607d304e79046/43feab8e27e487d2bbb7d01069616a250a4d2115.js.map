{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/screenshots.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/screenshots.ts"],"names":[],"mappings":"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","sourcesContent":["import {task} from 'gulp';\r\nimport {readdirSync, statSync, existsSync, mkdirp} from 'fs-extra';\r\nimport * as path from 'path';\r\nimport * as admin from 'firebase-admin';\r\nimport {openScreenshotsBucket, openFirebaseScreenshotsDatabase} from '../util/firebase';\r\nimport {setGithubStatus} from '../util/github';\r\n\r\nconst imageDiff = require('image-diff');\r\n\r\nconst SCREENSHOT_DIR = './screenshots';\r\nconst FIREBASE_REPORT = 'screenshot/reports';\r\nconst FIREBASE_FILELIST = 'screenshot/filenames';\r\n\r\n/** Task which upload screenshots generated from e2e test. */\r\ntask('screenshots', () => {\r\n  let prNumber = process.env['TRAVIS_PULL_REQUEST'];\r\n  if (prNumber) {\r\n    let database = openFirebaseScreenshotsDatabase();\r\n    return getScreenshotFiles(database)\r\n      .then((files: any[]) => downloadAllGoldsAndCompare(files, database, prNumber))\r\n      .then((results: boolean) => updateResult(database, prNumber, results))\r\n      .then((result: boolean) => updateGithubStatus(prNumber, result))\r\n      .then(() => uploadScreenshots('diff', prNumber))\r\n      .then(() => uploadScreenshots('test', prNumber))\r\n      .then(() => updateTravis(database, prNumber))\r\n      .then(() => setScreenFilenames(database, prNumber))\r\n      .then(() => database.goOffline(), () => database.goOffline());\r\n  } else if (process.env['TRAVIS']) {\r\n    // Only update golds and filenames for build\r\n    let database = openFirebaseScreenshotsDatabase();\r\n    uploadScreenshots('gold')\r\n      .then(() => setScreenFilenames(database))\r\n      .then(() => database.goOffline(), () => database.goOffline());\r\n  }\r\n});\r\n\r\nfunction updateFileResult(database: admin.database.Database, prNumber: string,\r\n                          filenameKey: string, result: boolean) {\r\n  return getPullRequestRef(database, prNumber).child('results').child(filenameKey).set(result);\r\n}\r\n\r\nfunction updateResult(database: admin.database.Database, prNumber: string, result: boolean) {\r\n  return getPullRequestRef(database, prNumber).child('result').set(result).then(() => result);\r\n}\r\n\r\nfunction getPullRequestRef(database: admin.database.Database, prNumber: string) {\r\n  return database.ref(FIREBASE_REPORT).child(prNumber);\r\n}\r\n\r\nfunction updateTravis(database: admin.database.Database,\r\n                      prNumber: string) {\r\n  return database.ref(FIREBASE_REPORT).child(prNumber).update({\r\n    commit: process.env['TRAVIS_COMMIT'],\r\n    sha: process.env['TRAVIS_PULL_REQUEST_SHA'],\r\n    travis: process.env['TRAVIS_JOB_ID'],\r\n  });\r\n}\r\n\r\n/** Get a list of filenames from firebase database. */\r\nfunction getScreenshotFiles(database: admin.database.Database) {\r\n  let bucket = openScreenshotsBucket();\r\n  return bucket.getFiles({ prefix: 'golds/' }).then(function(data: any) {\r\n    return data[0].filter((file: any) => file.name.endsWith('.screenshot.png'));\r\n  });\r\n}\r\n\r\nfunction extractScreenshotName(fileName: string) {\r\n  return path.basename(fileName, '.screenshot.png');\r\n}\r\n\r\nfunction getLocalScreenshotFiles(dir: string): string[] {\r\n  return readdirSync(dir)\r\n    .filter((fileName: string) => !statSync(path.join(SCREENSHOT_DIR, fileName)).isDirectory())\r\n    .filter((fileName: string) => fileName.endsWith('.screenshot.png'));\r\n}\r\n\r\n/**\r\n * Upload screenshots to google cloud storage.\r\n * @param prNumber - The key used in firebase. Here it is the PR number.\r\n *   If there's no prNumber, we will upload images to 'golds/' folder\r\n * @param mode - Can be 'test' or 'diff' or 'gold'.\r\n *   If the images are the test results, mode should be 'test'.\r\n *   If the images are the diff images generated, mode should be 'diff'.\r\n *   For golds mode should be 'gold'.\r\n */\r\nfunction uploadScreenshots(mode?: 'test' | 'diff' | 'gold', prNumber?: string) {\r\n  let bucket = openScreenshotsBucket();\r\n\r\n  let promises: any[] = [];\r\n  let localDir = mode == 'diff' ? path.join(SCREENSHOT_DIR, 'diff') : SCREENSHOT_DIR;\r\n  getLocalScreenshotFiles(localDir).forEach((file: string) => {\r\n    let fileName = path.join(localDir, file);\r\n    let destination = (mode == 'gold' || !prNumber) ?\r\n      `golds/${file}` : `screenshots/${prNumber}/${mode}/${file}`;\r\n    promises.push(bucket.upload(fileName, { destination: destination }));\r\n  });\r\n  return Promise.all(promises);\r\n}\r\n\r\n/** Download golds screenshots. */\r\nfunction downloadAllGoldsAndCompare(\r\n  files: any[], database: admin.database.Database,\r\n  prNumber: string) {\r\n\r\n  mkdirp(path.join(SCREENSHOT_DIR, `golds`));\r\n  mkdirp(path.join(SCREENSHOT_DIR, `diff`));\r\n\r\n  return Promise.all(files.map((file: any) => {\r\n    return downloadGold(file).then(() => diffScreenshot(file.name, database, prNumber));\r\n  })).then((results: boolean[]) => results.every((value: boolean) => value == true));\r\n}\r\n\r\n/** Download one gold screenshot */\r\nfunction downloadGold(file: any) {\r\n  return file.download({\r\n    destination: path.join(SCREENSHOT_DIR, file.name)\r\n  });\r\n}\r\n\r\nfunction diffScreenshot(filename: string, database: admin.database.Database,\r\n                        prNumber: string) {\r\n  // TODO(tinayuangao): Run the downloads and diffs in parallel.\r\n  filename = path.basename(filename);\r\n  let goldUrl = path.join(SCREENSHOT_DIR, `golds`, filename);\r\n  let pullRequestUrl = path.join(SCREENSHOT_DIR, filename);\r\n  let diffUrl = path.join(SCREENSHOT_DIR, `diff`, filename);\r\n  let filenameKey = extractScreenshotName(filename);\r\n\r\n  if (existsSync(goldUrl) && existsSync(pullRequestUrl)) {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      imageDiff({\r\n        actualImage: pullRequestUrl,\r\n        expectedImage: goldUrl,\r\n        diffImage: diffUrl,\r\n      }, (err: any, imagesAreSame: boolean) => {\r\n        if (err) {\r\n          console.log(err);\r\n          imagesAreSame = false;\r\n          reject(err);\r\n        }\r\n        resolve(imagesAreSame);\r\n        return updateFileResult(database, prNumber, filenameKey, imagesAreSame);\r\n      });\r\n    });\r\n  } else {\r\n    return updateFileResult(database, prNumber, filenameKey, false).then(() => false);\r\n  }\r\n}\r\n\r\n/**\r\n * Upload a list of filenames to firebase database as gold.\r\n * This is necessary for control panel since google-cloud is not available to client side.\r\n */\r\nfunction setScreenFilenames(database: admin.database.Database,\r\n                            prNumber?: string) {\r\n  let filenames: string[] = getLocalScreenshotFiles(SCREENSHOT_DIR);\r\n  let filelistDatabase = prNumber ?\r\n    database.ref(FIREBASE_REPORT).child(prNumber).child('filenames') :\r\n    database.ref(FIREBASE_FILELIST);\r\n  return filelistDatabase.set(filenames);\r\n}\r\n\r\n/** Updates the Github Status of the given Pullrequest. */\r\nfunction updateGithubStatus(prNumber: number, result: boolean) {\r\n  setGithubStatus(process.env['TRAVIS_PULL_REQUEST_SHA'], {\r\n    result: result,\r\n    name: 'Screenshot Tests',\r\n    description: `Screenshot Tests ${result ? 'passed' : 'failed'})`,\r\n    url: `http://material2-screenshots.firebaseapp.com/${prNumber}`\r\n  });\r\n}\r\n"]}