{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/components.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/components.ts"],"names":[],"mappings":"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","sourcesContent":["import {task, watch, src, dest} from 'gulp';\r\nimport {ScriptTarget, ModuleKind} from 'typescript';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  DIST_COMPONENTS_ROOT, PROJECT_ROOT, COMPONENTS_DIR, HTML_MINIFIER_OPTIONS, LICENSE_BANNER\r\n} from '../constants';\r\nimport {\r\n  sassBuildTask, tsBuildTask, execNodeTask, sequenceTask,\r\n  triggerLivereload\r\n} from '../util/task_helpers';\r\n\r\n// There are no type definitions available for these imports.\r\nconst inlineResources = require('../../../scripts/release/inline-resources');\r\nconst gulpRollup = require('gulp-better-rollup');\r\nconst gulpMinifyHtml = require('gulp-htmlmin');\r\nconst gulpIf = require('gulp-if');\r\n\r\n/** Path to tsconfig file for the components. */\r\nconst tsconfigPath = path.join(COMPONENTS_DIR, 'tsconfig.json');\r\n\r\n/** Asset files to be added to the components output. */\r\nconst assetFiles = [\r\n  path.join(COMPONENTS_DIR, '**/*.html'),\r\n  path.join(COMPONENTS_DIR, '**/*.scss'),\r\n  path.join(COMPONENTS_DIR, 'package.json'),\r\n  path.join(PROJECT_ROOT, 'README.md'),\r\n  path.join(PROJECT_ROOT, 'LICENSE'),\r\n];\r\n\r\n/** Builds components to UMD bundle. */\r\ntask('build:components', [':build:components:bundle:umd']);\r\n\r\n/** Builds components for Angular Material releases */\r\ntask(':build:components:release', sequenceTask(\r\n  ':build:components:bundle:umd',\r\n  ':build:components:bundle:esm',\r\n  ':build:components:ngc'\r\n));\r\n\r\n/** Builds components typescript in ES5, ES6 target. For specs Karma needs CJS output. */\r\ntask(':build:components:ts:es5', tsBuildTask(tsconfigPath, { target: ScriptTarget.ES5 }));\r\ntask(':build:components:ts:es6', tsBuildTask(tsconfigPath, { target: ScriptTarget.ES2015 }));\r\ntask(':build:components:ts:spec', tsBuildTask(tsconfigPath, {\r\n  target: ScriptTarget.ES5, module: ModuleKind.CommonJS\r\n}));\r\n\r\n/** Tasks to create a UMD or ES bundle */\r\ntask(':build:components:bundle:umd', sequenceTask(\r\n  ':build:components:ts:es5', ':build:components:inline', ':build:components:rollup:umd'\r\n));\r\n\r\ntask(':build:components:bundle:esm', sequenceTask(\r\n  ':build:components:ts:es6', ':build:components:inline', ':build:components:rollup:esm'\r\n));\r\n\r\n/** Copies all component assets to the build output. */\r\ntask(':build:components:assets', () => {\r\n  return src(assetFiles)\r\n    .pipe(gulpIf(/.html$/, gulpMinifyHtml(HTML_MINIFIER_OPTIONS)))\r\n    .pipe(dest(DIST_COMPONENTS_ROOT));\r\n});\r\n\r\n/** Compiles the components SCSS into minified CSS. */\r\ntask(':build:components:scss', sassBuildTask(DIST_COMPONENTS_ROOT, COMPONENTS_DIR, true));\r\n\r\n/** Builds a ES6 bundle for all components. */\r\ntask(':build:components:rollup:esm', () => {\r\n  return src(path.join(DIST_COMPONENTS_ROOT, 'index.js'))\r\n    .pipe(createRollupBundle('es', 'material.js'))\r\n    .pipe(dest(path.join(DIST_COMPONENTS_ROOT, 'bundles')));\r\n});\r\n\r\n/** Builds a UMD bundle (ES5) for all components. */\r\ntask(':build:components:rollup:umd', () => {\r\n  return src(path.join(DIST_COMPONENTS_ROOT, 'index.js'))\r\n  .pipe(createRollupBundle('umd', 'material.umd.js'))\r\n  .pipe(dest(path.join(DIST_COMPONENTS_ROOT, 'bundles')));\r\n});\r\n\r\n\r\n/** Builds components with resources (html, css) inlined into the built JS. */\r\ntask(':build:components:inline', sequenceTask(\r\n  [':build:components:scss', ':build:components:assets'],\r\n  ':inline-resources',\r\n));\r\n\r\n/** Inlines resources (html, css) into the JS output. */\r\ntask(':inline-resources', () => inlineResources(DIST_COMPONENTS_ROOT));\r\n\r\n/** Generates metadata.json files for all of the components. */\r\ntask(':build:components:ngc', ['build:components'], execNodeTask(\r\n  '@angular/compiler-cli', 'ngc', ['-p', tsconfigPath]\r\n));\r\n\r\n/** [Watch task] Rebuilds (ESM output) whenever ts, scss, or html sources change. */\r\ntask(':watch:components', () => {\r\n  watch(path.join(COMPONENTS_DIR, '**/*.ts'), ['build:components', triggerLivereload]);\r\n  watch(path.join(COMPONENTS_DIR, '**/*.scss'), ['build:components', triggerLivereload]);\r\n  watch(path.join(COMPONENTS_DIR, '**/*.html'), ['build:components', triggerLivereload]);\r\n});\r\n\r\nconst ROLLUP_GLOBALS = {\r\n  // Angular dependencies\r\n  '@angular/core': 'ng.core',\r\n  '@angular/common': 'ng.common',\r\n  '@angular/forms': 'ng.forms',\r\n  '@angular/http': 'ng.http',\r\n  '@angular/platform-browser': 'ng.platformBrowser',\r\n  '@angular/platform-browser-dynamic': 'ng.platformBrowserDynamic',\r\n\r\n  // Rxjs dependencies\r\n  'rxjs/Subject': 'Rx',\r\n  'rxjs/add/observable/fromEvent': 'Rx.Observable',\r\n  'rxjs/add/observable/forkJoin': 'Rx.Observable',\r\n  'rxjs/add/observable/of': 'Rx.Observable',\r\n  'rxjs/add/observable/merge': 'Rx.Observable',\r\n  'rxjs/add/observable/throw': 'Rx.Observable',\r\n  'rxjs/add/operator/auditTime': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/toPromise': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/map': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/filter': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/do': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/share': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/finally': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/catch': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/first': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/startWith': 'Rx.Observable.prototype',\r\n  'rxjs/add/operator/switchMap': 'Rx.Observable.prototype',\r\n  'rxjs/Observable': 'Rx'\r\n};\r\n\r\n/** Creates a rollup bundles of the Material components.*/\r\nfunction createRollupBundle(format: string, outFile: string) {\r\n  let rollupOptions = {\r\n    context: 'this',\r\n    external: Object.keys(ROLLUP_GLOBALS)\r\n  };\r\n\r\n  let rollupGenerateOptions = {\r\n    // Keep the moduleId empty because we don't want to force developers to a specific moduleId.\r\n    moduleId: '',\r\n    moduleName: 'ng.material',\r\n    banner: LICENSE_BANNER,\r\n    format: format,\r\n    dest: outFile,\r\n    globals: ROLLUP_GLOBALS,\r\n  };\r\n\r\n  return gulpRollup(rollupOptions, rollupGenerateOptions);\r\n}\r\n"]}