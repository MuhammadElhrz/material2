{"version":3,"file":"/mnt/c/basidia/material2/tools/gulp/tasks/release.ts","sources":["/mnt/c/basidia/material2/tools/gulp/tasks/release.ts"],"names":[],"mappings":"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","sourcesContent":["import {spawn} from 'child_process';\r\nimport {existsSync, statSync} from 'fs';\r\nimport {task} from 'gulp';\r\nimport gulpRunSequence = require('run-sequence');\r\nimport path = require('path');\r\nimport minimist = require('minimist');\r\n\r\nimport {execTask, cleanTask} from '../util/task_helpers';\r\nimport {DIST_COMPONENTS_ROOT} from '../constants';\r\n\r\nconst argv = minimist(process.argv.slice(3));\r\n\r\n/** Removes redundant spec files from the release. TypeScript creates definition files for specs. */\r\n// TODO(devversion): tsconfig files should share code and don't generate spec files for releases.\r\ntask(':build:release:clean-spec', cleanTask('dist/**/*+(-|.)spec.*'));\r\n\r\n\r\ntask('build:release', function(done: () => void) {\r\n  // Synchronously run those tasks.\r\n  gulpRunSequence(\r\n    'clean',\r\n    ':build:components:release',\r\n    ':build:release:clean-spec',\r\n    done\r\n  );\r\n});\r\n\r\n\r\n/** Make sure we're logged in. */\r\ntask(':publish:whoami', execTask('npm', ['whoami'], {\r\n  silent: true,\r\n  errMessage: 'You must be logged in to publish.'\r\n}));\r\n\r\ntask(':publish:logout', execTask('npm', ['logout']));\r\n\r\n\r\nfunction _execNpmPublish(label: string): Promise<{}> {\r\n  const packageDir = DIST_COMPONENTS_ROOT;\r\n  if (!statSync(packageDir).isDirectory()) {\r\n    return;\r\n  }\r\n\r\n  if (!existsSync(path.join(packageDir, 'package.json'))) {\r\n    throw new Error(`\"${packageDir}\" does not have a package.json.`);\r\n  }\r\n\r\n  process.chdir(packageDir);\r\n  console.log(`Publishing material...`);\r\n\r\n  const command = 'npm';\r\n  const args = ['publish', '--access', 'public', label ? `--tag` : undefined, label || undefined];\r\n  return new Promise((resolve, reject) => {\r\n    console.log(`  Executing \"${command} ${args.join(' ')}\"...`);\r\n    if (argv['dry']) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const childProcess = spawn(command, args);\r\n    childProcess.stdout.on('data', (data: Buffer) => {\r\n      console.log(`  stdout: ${data.toString().split(/[\\n\\r]/g).join('\\n          ')}`);\r\n    });\r\n    childProcess.stderr.on('data', (data: Buffer) => {\r\n      console.error(`  stderr: ${data.toString().split(/[\\n\\r]/g).join('\\n          ')}`);\r\n    });\r\n\r\n    childProcess.on('close', (code: number) => {\r\n      if (code == 0) {\r\n        resolve();\r\n      } else {\r\n        reject(new Error(`Material did not publish, status: ${code}.`));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\ntask(':publish', function(done: (err?: any) => void) {\r\n  const label = argv['tag'];\r\n  const currentDir = process.cwd();\r\n\r\n  if (!label) {\r\n    console.log('You can use a label with --tag=labelName.');\r\n    console.log('Publishing using the latest tag.');\r\n  } else {\r\n    console.log(`Publishing using the ${label} tag.`);\r\n  }\r\n  console.log('\\n\\n');\r\n\r\n  // Publish only the material package.\r\n  return _execNpmPublish(label)\r\n    .then(() => done())\r\n    .catch((err: Error) => done(err))\r\n    .then(() => process.chdir(currentDir));\r\n});\r\n\r\ntask('publish', function(done: () => void) {\r\n  gulpRunSequence(\r\n    ':publish:whoami',\r\n    'build:release',\r\n    ':publish',\r\n    ':publish:logout',\r\n    done\r\n  );\r\n});\r\n"]}